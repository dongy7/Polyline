{"version":3,"file":"index.js","sources":["../src/utils.js","../src/index.js"],"sourcesContent":["// @flow\n\nexport type Coordinate = [number, number]\nexport type Line = Array<Coordinate>\nexport type DistFunc = (start: Coordinate, end: Coordinate) => number\nexport type Segment = {\n  start: Coordinate,\n  end: Coordinate,\n  mileDistance: number,\n  euclideanDistance: number,\n}\nexport type Polyline = {\n  segments: Array<Segment>,\n  euclideanLength: number,\n  mileLength: number,\n}\nexport type Searcher = (polyline: Polyline, percent: number) => Coordinate\n\n// kilometers per mile\nconst kiloPerMile = 1.60934\n\n// radius or earth in miles\nconst earthRadius = 3961\n\nexport const square = (x: number) => x * x\n\n// rounds to the nearest thousandth digit\nexport const round = (n: number) => Math.round(n * 1000) / 1000\n\nexport const getEuclideanDist: DistFunc = (a: Coordinate, b: Coordinate) => {\n  const squaredDistance = square(a[0] - b[0]) + square(a[1] - b[1])\n  return Math.sqrt(squaredDistance)\n}\n\nconst degreeToRad = (degree: number) => degree * (Math.PI / 180)\n\n// get the distance in miles between two coordinates\nexport const getMileDist: DistFunc = (start: Coordinate, end: Coordinate) => {\n  const startInRadians = start.map(degree => degreeToRad(degree))\n  const endInRadians = end.map(degree => degreeToRad(degree))\n  const [startLatitude, startLongitude] = startInRadians\n  const [endLatitude, endLongitude] = endInRadians\n\n  const latitudeDelta = endLatitude - startLatitude\n  const longitudeDelta = endLongitude - startLongitude\n  const a =\n    square(Math.sin(latitudeDelta / 2)) +\n    Math.cos(startLatitude) *\n      Math.cos(endLatitude) *\n      square(Math.sin(longitudeDelta / 2))\n  const c = Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)) * 2\n  return round(earthRadius * c)\n}\n\nexport const milesToKm = (mile: number) => mile * kiloPerMile\n\nexport const buildPolyline = (geojson: Line): Polyline => {\n  if (geojson.length === 1) {\n    const [start] = geojson\n    return {\n      segments: [{ start, end: start, mileDistance: 0, euclideanDistance: 0 }],\n      mileLength: 0,\n      euclideanLength: 0,\n    }\n  }\n\n  const polyline: Polyline = { mileLength: 0, euclideanLength: 0, segments: [] }\n\n  for (let i = 0; i < geojson.length - 1; i += 1) {\n    const start = geojson[i]\n    const end = geojson[i + 1]\n    const mileDist = getMileDist(start, end)\n    const euclideanDist = getEuclideanDist(start, end)\n\n    polyline.segments.push({\n      start,\n      end,\n      mileDistance: mileDist,\n      euclideanDistance: euclideanDist,\n    })\n\n    polyline.euclideanLength += euclideanDist\n    polyline.mileLength += mileDist\n  }\n\n  return polyline\n}\n\nconst getInterpolatedPoint = (\n  segment: Segment,\n  segmentPercentage: number,\n  offset: number\n): Coordinate => {\n  const { start, end } = segment\n\n  const offsetProportion = offset / segmentPercentage\n\n  const [startLat, startLong] = start\n  const [endLat, endLong] = end\n  const deltaX = Math.abs(endLat - startLat) * offsetProportion\n  const deltaY = Math.abs(endLong - startLong) * offsetProportion\n\n  const offsetX = startLat < endLat ? deltaX : -deltaX\n  const offsetY = startLong < endLong ? deltaY : -deltaY\n\n  return [startLat + offsetX, startLong + offsetY]\n}\n\nexport const linearSearcher: Searcher = (\n  polyline: Polyline,\n  percent: number\n): Coordinate => {\n  const { segments, mileLength } = polyline\n  let distanceCovered = 0\n  let percentRemaining = percent\n  let segment = segments[segments.length - 1]\n  let currentPercent = 0\n\n  for (let i = 0; i < segments.length; i += 1) {\n    distanceCovered += segments[i].mileDistance\n    currentPercent = distanceCovered / mileLength\n\n    if (currentPercent >= percent) {\n      segment = segments[i]\n      break\n    }\n\n    percentRemaining -= currentPercent\n  }\n\n  return getInterpolatedPoint(\n    segment,\n    segment.mileDistance / mileLength,\n    percentRemaining\n  )\n}\n","import type { Coordinate, Line } from './utils'\nimport { buildPolyline, milesToKm, getMileDist, linearSearcher } from './utils'\n\nclass Polyline {\n  constructor(geojson: Line) {\n    this.line = geojson\n    this.polyline = buildPolyline(geojson)\n  }\n\n  getLengthInMiles() {\n    return this.polyline.mileLength\n  }\n\n  getLengthInKm() {\n    return milesToKm(this.getLengthInMiles())\n  }\n\n  getPointCovering(percent: number) {\n    return linearSearcher(this.polyline, percent)\n  }\n\n  static getDistanceBetweenPoints(start: Coordinate, end: Coordinate) {\n    return getMileDist(start, end)\n  }\n\n  static getDistanceBetweenPointsKm(start: Coordinate, end: Coordinate) {\n    return milesToKm(Polyline.getDistanceBetweenPoints(start, end))\n  }\n}\n\nexport default Polyline\n"],"names":["kiloPerMile","earthRadius","square","x","round","n","Math","getEuclideanDist","a","b","squaredDistance","sqrt","degreeToRad","degree","PI","getMileDist","start","end","startInRadians","map","endInRadians","startLatitude","startLongitude","endLatitude","endLongitude","latitudeDelta","longitudeDelta","sin","cos","c","atan2","milesToKm","mile","buildPolyline","geojson","length","mileDistance","euclideanDistance","polyline","mileLength","euclideanLength","segments","i","mileDist","euclideanDist","push","getInterpolatedPoint","segment","segmentPercentage","offset","offsetProportion","startLat","startLong","endLat","endLong","deltaX","abs","deltaY","offsetX","offsetY","linearSearcher","percent","distanceCovered","percentRemaining","currentPercent","Polyline","line","getLengthInMiles","getDistanceBetweenPoints"],"mappings":"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"}